package {{$generatedArtifactPackageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

import static tech.intellispaces.reflections.framework.reflection.ReflectionWrapperMethods.reflectionRealizationMethod;

/**
 * This class was generated automatically. Don't try to change it.
 */
@Wrapper({{$sourceArtifactSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$generatedArtifactSimpleName}}{{$typeParamsFull}} extends {{$sourceArtifactSimpleName}}{{$typeParamsBrief}} implements {{$reflectionClassSimpleName}}{{$typeParamsBrief}}, ReflectionWrapper, OverlyingReflectionController, PostRegistrationReflectionHandler {
  private static ReflectionRealizationType $TYPE;
  private static final EngineRegistrar $engineRegistrar = ReflectionsNodeFunctions.createEngineRegistrar();
  private final ReflectionHandle $handle;

{{for constructor : $constructors}}
  public {{$generatedArtifactSimpleName}}({{for param : $constructor["params"]}}{{$param["type"]}} {{$param["name"]}}{{when $param.isNotLast()}}, {{end}}{{end}}) {
    super({{for param : $constructor["params"]}}{{$param["name"]}}{{when $param.isNotLast()}}, {{end}}{{end}});
    $handle = $registerReflection();
    postRegistration();
  }

{{end}}

  @Override
  public ReflectionHandle $handle() {
    return this.$handle;
  }

{{for method : $conversionMethods}}
  {{$method["declaration"]}}

{{end}}
{{for method : $traverseMethods}}
  @Override
  {{$method["declaration"]}}

{{end}}
{{for method : $guideActionMethods}}
  {{$method["declaration"]}}

{{end}}
{{when $notImplRelease}}
  @Override
  public void unbind() {
    // do nothing
  }
{{end}}

  @Override
  public Rid rid() {
    return Rids.undefined();
  }

  @Override
  public String reflectionName() {
    return null;
  }

  @Override
  public ReflectionDomain domain() {
    return Domains.create(Rids.create(Base64Functions.convertUrlNoPaddingBase64ToBytes("{{$didBase64}}"), "{{$didOrigin}}"), "{{$domainName}}", {{$domainClassSimpleName}}.class, {{when $isAlias}}{{$primaryDomainTypeDeclaration}}{{else}}{{$domainTypeDeclaration}}{{end}});
  }

  @Override
  public @Nullable java.lang.String domainName() {
    return "{{$domainName}}";
  }

  public Type<{{$primaryDomainSimpleName}}{{$primaryDomainTypeArguments}}> primaryDomain() {
    return {{$primaryDomainTypeDeclaration}};
  }

  @Override
  public {{$reflectionClassSimpleName}}{{$typeParamsBrief}} asMovableOrElseThrow() {
    return this;
  }

  @Override
  public <TD, TH> void addProjection(Class<TD> targetDomain, TH target) {
    $handle.addProjection(targetDomain, target);
  }

  @Override
  public java.util.List<MovableReflection> underlyingReflections() {
    return (java.util.List<MovableReflection>) $handle.underlyingReflections();
  }

  @Override
  public MovableReflection overlyingReflection() {
    return (MovableReflection) $handle.overlyingReflection();
  }

  @Override
  public void setOverlyingReflection(SystemReflection overlyingReflection) {
    $handle.setOverlyingReflection(overlyingReflection);
  }

  @Override
  public <TD, TH> TH mapTo(Class<TD> targetDomain) {
    return $handle.mapTo(targetDomain);
  }

  @Override
  public <T, Q, C extends Channel1 & MappingTraverse> T mapThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return Modules.current().mapThruChannel1(this, channelClass, qualifier);
  }

  @Override
  public <Q> {{$generatedArtifactSimpleName}}{{$typeParamsBrief}} moveThru(Rid cid, Q qualifier) throws TraverseException {
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <S> MovableReflection moveThru(Class<S> sourceDomain, ChannelFunction0<S, S> channelFunction) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(sourceDomain, channelFunction);
    return Modules.current().moveThruChannel0(this, cid);
  }

  @Override
  public <S, QD, QR> MovableReflection moveThru(Class<S> sourceDomain, ChannelFunction1<S, S, QD> channelFunction, Class<QD> qualifierDomain, QR qualifier) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(sourceDomain, channelFunction, null);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <S> MovableReflection moveThru(Class<S> sourceDomain, ChannelFunction1<S, S, String> channelFunction, String qualifier) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(sourceDomain, channelFunction, null);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <S> MovableReflection moveThru(Class<S> sourceDomain, ChannelFunction1<S, S, Integer> channelFunction, int qualifier) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(sourceDomain, channelFunction, null);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <S, R> R mapOfMovingThru(Class<S> sourceDomain, ChannelFunction0<S, ?> channelFunction) throws TraverseException {
    throw NotImplementedExceptions.withCode("cuDSAA");
  }

  @Override
  public <S, R, QD, QR> R mapOfMovingThru(Class<S> sourceDomain, ChannelFunction1<?, ?, ?> channelFunction, Class<QD> qualifierDomain, QR qualifier) throws TraverseException {
    throw NotImplementedExceptions.withCode("PZX5vA");
  }

  @Override
  public {{$generatedArtifactSimpleName}}{{$typeParamsBrief}} moveThru(Class<? extends Channel0> channelClass) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(channelClass);
    return Modules.current().moveThruChannel0(this, cid);
  }

  @Override
  public <Q> {{$generatedArtifactSimpleName}}{{$typeParamsBrief}} moveThru(Class<? extends Channel1> channelClass, Q qualifier) throws TraverseException {
    var cid = ChannelFunctions.getChannelId(channelClass);
    return Modules.current().moveThruChannel1(this, cid, qualifier);
  }

  @Override
  public <R, Q> R mapOfMovingThru(Rid cid, Q qualifier) throws TraverseException {
    return Modules.current().mapOfMovingThruChannel1(this, cid, qualifier);
  }

  @Override
  public <R> R mapOfMovingThru(Class<? extends Channel0> channelClass) throws TraverseException {
    throw NotImplementedExceptions.withCode("z0PzzQ");
  }

  @Override
  public <R, Q, C extends Channel1 & MappingOfMovingTraverse> R mapOfMovingThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    return Modules.current().mapOfMovingThruChannel1(this, channelClass, qualifier);
  }

  @Override
  public Projection projectionThru(Rid cid) {
    throw NotImplementedExceptions.withCode("2ga09A");
  }

  @Override
  public Projection projectionThru(String channelName) {
    throw NotImplementedExceptions.withCode("2N1yyLbo");
  }

  @Override
  public Projection projectionTo(String domainName) {
    throw NotImplementedExceptions.withCode("iG6RBQ");
  }

  @Override
  public Projection projectionTo(ReflectionDomain domain) {
    return Projections.unknown();
  }

  @Override
  public List<ReflectionPoint> underlyingPoints() {
    throw NotImplementedExceptions.withCode("1fm6Ng");
  }

  @Override
  public List<Reflection> relatedReflections() {
    throw NotImplementedExceptions.withCode("zUwsl5PV");
  }
{{for method : $injectionMethods}}
  {{$method["javadoc"]}}
{{for annotation : $method["annotations"]}}
  @{{$annotation}}
{{end}}
  public {{$method["signature"]}} {
    {{$method["body"]}}
  }
{{end}}

  @Override
  public boolean canBeRepresentedAsPoint() {
    return true;
  }

  @Override
  public boolean canBeRepresentedAsDomain() {
    return false;
  }

  @Override
  public boolean canBeRepresentedAsChannel() {
    return false;
  }

  @Override
  public boolean canBeRepresentedAsSpace() {
    return false;
  }

  @Override
  public ReflectionPoint asPoint() {
    return this;
  }

  @Override
  public ReflectionDomain asDomain() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection domain");
  }

  @Override
  public ReflectionChannel asChannel() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection channel");
  }

  @Override
  public ReflectionSpace asSpace() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection space");
  }

  private ReflectionHandle $registerReflection() {
    var engine = Modules.current().engine();
    if ($TYPE == null) {
      $TYPE = $buildReflectionRealizationType();
    }
    if ($engineRegistrar.register(engine)) {
      engine.registerReflectionRealizationType($TYPE);
    }
    return engine.registerReflection(this, $TYPE);
  }

  private static ReflectionRealizationType $buildReflectionRealizationType() {
    return ReflectionRealizationTypes.create(
        {{$generatedArtifactSimpleName}}.class,
        {{$sourceArtifactSimpleName}}.class{{when $methodDescriptions.isNotEmpty()}},{{end}}
{{for method : $methodDescriptions}}
        reflectionRealizationMethod({{$generatedArtifactSimpleName}}.class, "{{$method["name"]}}"{{for param : $method["params"]}}, {{$param}}.class{{end}})
            .purpose(ReflectionRealizationMethodPurposes.{{$method["purpose"]}})
            .function({{$generatedArtifactSimpleName}}::{{$method["name"]}})
{{when $method["traverseOrdinal"].isNotVoid()}}
            .traverseOrdinal({{$method["traverseOrdinal"]}})
{{end}}
{{when $method["channelClass"].isNotVoid()}}
            .channelClass({{$method["channelClass"]}}.class)
{{end}}
{{when $method["traverseType"].isNotVoid()}}
            .traverseType(TraverseTypes.{{$method["traverseType"]}})
{{end}}
{{when $method["injectionKind"].isNotVoid()}}
            .injectionKind("{{$method["injectionKind"]}}")
{{end}}
{{when $method["injectionOrdinal"].isNotVoid()}}
            .injectionOrdinal({{$method["injectionOrdinal"]}})
{{end}}
{{when $method["injectionName"].isNotVoid()}}
            .injectionName("{{$method["injectionName"]}}")
{{end}}
{{when $method["injectionType"].isNotVoid()}}
            .injectionType({{$method["injectionType"]}}.class)
{{end}}
            .get(){{when $method.isNotLast()}},{{end}}
{{end}}
    );
  }
}
