package {{$generatedArtifactPackageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Unmovable reflection realization for data object of domain {@link {{$sourceArtifactSimpleName}}}.
 * <p>
 * Data objects are entirely in memory.
 * <p>
 * This class was generated automatically. Don't try to change it.
 */
@Reflection(domainClass = {{$sourceArtifactSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$generatedArtifactSimpleName}} implements {{$reflectionClassName}} {
{{for projection : $projections}}
  private final {{$projection["type"]}} {{$projection["name"]}};
{{end}}

  public {{$generatedArtifactSimpleName}}(
{{for projection : $projections}}
    @Name("{{$projection["name"]}}") {{$projection["type"]}} {{$projection["name"]}}{{when $projection.isNotLast()}},{{end}}
{{end}}
  ) {
{{for projection : $projections}}
    this.{{$projection["name"]}} = {{$projection["name"]}};
{{end}}
  }

  @Override
  public Rid rid() {
    return Rids.undefined();
  }

  @Override
  public String reflectionName() {
    throw NotImplementedExceptions.withCode("P36MKNBx");
  }

  @Override
  public ReflectionDomain domain() {
    return Domains.create(Rids.create(Base64Functions.convertUrlNoPaddingBase64ToBytes("{{$didBase64}}"), "{{$didOrigin}}"), "{{$domainName}}", {{$sourceArtifactSimpleName}}.class, Types.get({{$sourceArtifactSimpleName}}.class));
  }

  @Override
  public @Nullable java.lang.String domainName() {
    return "{{$domainName}}";
  }

{{for projection : $projections}}
  @Override
  public {{$projection["type"]}} {{$projection["name"]}}() {
    return this.{{$projection["name"]}};
  }

{{when $projection["type"].eq("Integer")}}
  @Override
  public int {{$projection["name"]}}AsPrimitive() {
    Objects.requireNonNull(this.{{$projection["name"]}});
    return this.{{$projection["name"]}};
  }
{{else when $projection["type"].eq("Double")}}
  @Override
  public double {{$projection["name"]}}AsPrimitive() {
    Objects.requireNonNull(this.{{$projection["name"]}});
    return this.{{$projection["name"]}};
  }
{{end}}
{{end}}

  @Override
  public {{$movableReflectionClassName}} asMovableOrElseThrow() {
    throw UnexpectedExceptions.withMessage("Unmovable object");
  }

  @Override
  public void unbind() {
    // do nothing
  }

  @Override
  public <TD, TH> void addProjection(Class<TD> targetDomain, TH target) {
    throw NotImplementedExceptions.withCode("5mEyvQ");
  }

  @Override
  public java.util.List<SystemReflection> underlyingReflections() {
    throw NotImplementedExceptions.withCode("VCEdng");
  }

  @Override
  public SystemReflection overlyingReflection() {
    throw NotImplementedExceptions.withCode("Gl2z4f8y");
  }

  @Override
  public <TD, TH> TH mapTo(Class<TD> targetDomain) {
    throw NotImplementedExceptions.withCode("zGRjYw");
  }

  @Override
  public <T, Q, C extends Channel1 & MappingTraverse> T mapThru(Class<C> channelClass, Q qualifier) throws TraverseException {
    Type<{{$sourceArtifactSimpleName}}{{$typeParamsBrief}}> sourceType = Types.get({{$sourceArtifactSimpleName}}.class);
    return Modules.current().mapThruChannel1(sourceType, channelClass, qualifier);
  }

  @Override
  public Projection projectionThru(Rid cid) {
    throw NotImplementedExceptions.withCode("TXLRZw");
  }

  @Override
  public Projection projectionThru(String channelName) {
    throw NotImplementedExceptions.withCode("V4k30q2u");
  }

  @Override
  public Projection projectionTo(String domainName) {
    throw NotImplementedExceptions.withCode("7rzzGw");
  }

  @Override
  public Projection projectionTo(ReflectionDomain domain) {
    return Projections.unknown();
  }

  @Override
  public List<ReflectionPoint> underlyingPoints() {
    return List.of();
  }

  @Override
  public List<tech.intellispaces.core.Reflection> relatedReflections() {
    return List.of();
  }

  @Override
  public boolean canBeRepresentedAsPoint() {
    return true;
  }

  @Override
  public boolean canBeRepresentedAsDomain() {
    return false;
  }

  @Override
  public boolean canBeRepresentedAsChannel() {
    return false;
  }

  @Override
  public boolean canBeRepresentedAsSpace() {
    return false;
  }

  @Override
  public ReflectionPoint asPoint() {
    return this;
  }

  @Override
  public ReflectionDomain asDomain() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection point");
  }

  @Override
  public ReflectionChannel asChannel() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection channel");
  }

  @Override
  public ReflectionSpace asSpace() {
    throw UnexpectedExceptions.withMessage("This reflection cannot be considered as a reflection space");
  }
}
